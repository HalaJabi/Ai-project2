
import java.awt.Point;
import java.util.ArrayList;
import java.util.Random;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template

/**
 *
 * @author hp
 */
public class FrameBinaryClassify extends javax.swing.JFrame {

    /**
     * Creates new form FrameBinaryClassify
     */
   public shapeDraw shp;
    public double weight1,weight2,learningRate,Threshold,ydesaired,Yactual,error,delta, iteration;

    public ArrayList<shapeDraw>listshp ,listnorm;
    double x1 ,x2 ,y2, y1;
    
    
    public FrameBinaryClassify() {
        initComponents();
        shp=new shapeDraw();
        listshp = new ArrayList<shapeDraw>();
        listnorm = new ArrayList<shapeDraw>();
        
        
            weight1=0;
            weight2=0;
            
            error=0;
       
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        panelToDraw1 = new panelToDraw();
        jLabel1 = new javax.swing.JLabel();
        shapecircle = new javax.swing.JRadioButton();
        shapetriangle = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textLearnRate = new javax.swing.JTextField();
        maxNumIteration = new javax.swing.JTextField();
        buttonClassify = new javax.swing.JButton();
        buttonClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        panelToDraw1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelToDraw1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelToDraw1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelToDraw1Layout = new javax.swing.GroupLayout(panelToDraw1);
        panelToDraw1.setLayout(panelToDraw1Layout);
        panelToDraw1Layout.setHorizontalGroup(
            panelToDraw1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 681, Short.MAX_VALUE)
        );
        panelToDraw1Layout.setVerticalGroup(
            panelToDraw1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 375, Short.MAX_VALUE)
        );

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Dutch801 Rm BT", 2, 36)); // NOI18N
        jLabel1.setText("Linear binary classifier");

        shapecircle.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroup2.add(shapecircle);
        shapecircle.setFont(new java.awt.Font("Dutch801 Rm BT", 2, 18)); // NOI18N
        shapecircle.setText("Circle");

        shapetriangle.setBackground(new java.awt.Color(0, 153, 153));
        buttonGroup2.add(shapetriangle);
        shapetriangle.setFont(new java.awt.Font("Dutch801 Rm BT", 2, 18)); // NOI18N
        shapetriangle.setText("Triangle");

        jLabel2.setFont(new java.awt.Font("Dutch801 Rm BT", 2, 18)); // NOI18N
        jLabel2.setText("Learning Rate ");

        jLabel3.setFont(new java.awt.Font("Dutch801 Rm BT", 2, 18)); // NOI18N
        jLabel3.setText("Max # of iteration ");

        textLearnRate.setFont(new java.awt.Font("Dutch801 Rm BT", 2, 18)); // NOI18N
        textLearnRate.setText("0.3");
        textLearnRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textLearnRateActionPerformed(evt);
            }
        });

        maxNumIteration.setFont(new java.awt.Font("Dutch801 Rm BT", 2, 18)); // NOI18N

        buttonClassify.setBackground(new java.awt.Color(0, 102, 102));
        buttonClassify.setFont(new java.awt.Font("Dutch801 Rm BT", 2, 18)); // NOI18N
        buttonClassify.setText("Classify");
        buttonClassify.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        buttonClassify.setBorderPainted(false);
        buttonClassify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClassifyActionPerformed(evt);
            }
        });

        buttonClear.setBackground(new java.awt.Color(0, 102, 102));
        buttonClear.setFont(new java.awt.Font("Dutch801 Rm BT", 2, 18)); // NOI18N
        buttonClear.setText("Clear");
        buttonClear.setBorderPainted(false);
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(shapecircle)
                            .addComponent(shapetriangle))
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textLearnRate, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(maxNumIteration, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(91, 91, 91)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonClassify, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(panelToDraw1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(268, 268, 268)
                        .addComponent(jLabel1)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(panelToDraw1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonClassify, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(shapecircle)
                                .addComponent(jLabel2)
                                .addComponent(textLearnRate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(shapetriangle)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(maxNumIteration, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(buttonClear, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panelToDraw1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelToDraw1MouseClicked
        // TODO add your handling code here:
          shp = new shapeDraw();
        int X , Y;
        X= evt.getX();
        Y=evt.getY();
        
        shp.setX(X);
        shp.setY(Y);
        
        Point pt =new Point();
        pt.x=X;
        pt.y=Y;
        
        
        if(shapecircle.isSelected())
        {
         
         shp.setType("circle");
        
        }

        
        else if(shapetriangle.isSelected())
        {
           
            shp.setType("triangle");
            
        }
        
        listshp.add(shp);
        panelToDraw1.DrawShape(shp);
        
    }//GEN-LAST:event_panelToDraw1MouseClicked

    private void buttonClassifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClassifyActionPerformed
        // TODO add your handling code here:
        panelToDraw1.clearLines();
        learningRate=Double.parseDouble(textLearnRate.getText());
        iteration=Integer.parseInt(maxNumIteration.getText());
        Threshold=new Random().nextDouble();
        weight1=0.5;
        weight2=0.5;
        
            
            
            singleneurnper("circle");
           
            getPt();
           
           
            
            panelToDraw1.LineDraw((int)x1,(int)y1,(int) x2, (int)y2);

            
         
        
    }//GEN-LAST:event_buttonClassifyActionPerformed

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        // TODO add your handling code here:
        
        weight1=0;
        weight2=0;
        Threshold=0;
        learningRate=0;
        error=0;
        iteration=0;
        
        listshp.clear();
        listnorm.clear();
        panelToDraw1.clear();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void textLearnRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textLearnRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textLearnRateActionPerformed
      
    public void getPt(){
        double slope = -weight1/weight2;
        double yIntercept = Threshold/weight2;

        double ptX1 , pxX2;
        ptX1 = normX(0.0);
        pxX2 = normX(670.0);
        y1 = slope*ptX1 +yIntercept;
        y2 = slope*pxX2 +yIntercept ;
        x1 = deNromX(ptX1);
        x2 = deNromX(pxX2);
        y1 = deNormY(y1);
        y2 = deNormY(y2);
    }
      
    public void singleneurnper(String Type)
    {
     
        for (shapeDraw s : listshp){
            shapeDraw Ns = new shapeDraw();
            Ns.typeOfShape = s.typeOfShape;
            Ns.x =normX(s.x);
            Ns.y = normY(s.y);
            listnorm.add(Ns);
        }
        int flag =0 ;
      
             
        
        int iterationnumber = 0; 
        while (iterationnumber < iteration){
        if (flag ==0){
         for (shapeDraw S : listnorm){
         double x , y ; 
         x = S.x ; 
         y = S.y ;
         Yactual = activationSign((x*weight1) + (y*weight2) + Threshold);
         if (S.getType().equals(Type)){
                ydesaired=1;
              
            }
            else {
                ydesaired=-1;
               
            }
         error = ydesaired-Yactual;
         
         if (error != 0){
                flag = 0; 
                delta=learningRate*x*error;
                weight1=weight1+delta;
        
                delta=learningRate*y*error;
                weight2=weight2+delta;
                
                delta=learningRate*0.1*error;
                Threshold=Threshold+delta;
            }
         else 
           flag+=1;
         
         }
          iterationnumber++;
          if (iterationnumber >=iteration)
           break;
        
        }
       
        }
        
        
                   
    }
       
       
     
    public double normX(double in ){
        double IMin =0 ; 
        double IMax = 683;
        double NMax , NMin ;
        NMax = 1 ; 
        NMin =-1 ;
        double I = ( (in - IMin) *( (NMax -NMin)/(IMax-IMin)) + NMin);
        return I;
    
    }
    
    
    public double normY(double in ){
        double IMin =0 ; 
        double IMax = 377;
        double NMax , NMin ;
        NMax = 1 ; 
        NMin =-1 ;
        double I = ( (in - IMin) *( (NMax -NMin)/(IMax-IMin)) + NMin);
        return I;
    
    }
      
      
      
    public double deNromX (double in ){
    double NMIn , OMax , OMin , NMax , O ;
    double O1;
    O1 = in; 
    OMin = 0;
    OMax = 683;
    NMax = 1 ; 
    NMIn =-1 ;
    
    
    O =  ((O1 - NMIn )*((OMax - OMin)/(NMax-NMIn)) + OMin);
    
    
    return O;
  
    } 
       public double deNormY (double in ){
       
    double NMin , OMax , OMIn , NMax , O ;
    double O1;
    O1 = in; 
    OMIn = 0;
    OMax = 377;
    NMax = 1 ; 
    NMin =-1 ;
    
    
    O =  ((O1 - NMin )*((OMax - OMIn)/(NMax-NMin)) + OMIn);
    
      return O;     
           
    }  
    
    
    public int activationSign (double x){
    
        if(x<0)
          return -1;
        else
          return 1;
    }
    
   
    
    
      
   
    
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameBinaryClassify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameBinaryClassify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameBinaryClassify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameBinaryClassify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameBinaryClassify().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClassify;
    private javax.swing.JButton buttonClear;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField maxNumIteration;
    private panelToDraw panelToDraw1;
    private javax.swing.JRadioButton shapecircle;
    private javax.swing.JRadioButton shapetriangle;
    private javax.swing.JTextField textLearnRate;
    // End of variables declaration//GEN-END:variables
}
